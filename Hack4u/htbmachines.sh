#!/bin/bash

# curl -s -X GET https://htbmachines.github.io/bundle.js > bundle_download.js

# Variables color texto
grec="\e[0;32m\033[1m" # Copy: ${grec}${endc}
endc="\033[0m\e[0m"
redc="\e[0;31m\033[1m" # Copy: ${redc}${endc}
bluc="\e[0;34m\033[1m" # Copy: ${bluc}${endc}
yelc="\e[0;33m\033[1m" # Copy: ${yelc}${endc}
purc="\e[0;35m\033[1m" # Copy: ${purc}${endc}
turc="\e[0;36m\033[1m" # Copy: ${turc}${endc}
grac="\e[0;37m\033[1m" # Copy: ${grac}${endc}


function ctrl_c(){
	echo -e "\n\n${redc}[!] Saliendo...${endc}\n"
	exit 1
}

# Ctrl + C
trap ctrl_c INT

# Variables globales
main_url="https://htbmachines.github.io/bundle.js"

function helpPanel(){
	echo -e "\n${yelc}[+]${endc}${grac} Uso:${endc}"
	echo -e "\t${purc}-u${endc} \t\t${grac}Actualizar datos${endc}\n"
	echo -e "\t${purc}-m <nombre>${endc} \t${grac}Buscar por nombre de máquina${endc}\n"
	echo -e "\t${purc}-i <IP>${endc} \t${grac}Buscar por dirección IP${endc}\n"
	echo -e "\t${purc}-y <nombre>${endc} \t${grac}Enlace a Writeup en Youtube${endc}\n"
	echo -e "\t${purc}-o <S.O.>${endc} \t${grac}Listar máquinas por Sistema Operativo${endc}\n"
	echo -e "\t${purc}-d <dificultad>${endc} ${grac}Listar máquinas por dificultad${endc}\n"
	echo -e "\t${purc}-s <skill>${endc} \t${grac}Listar máquinas por habilidad entrenada${endc}\n"
	echo -e "\t${purc}-h${endc} \t\t${grac}Mostrar este panel de ayuda${endc}\n"
}




function updateFile(){
	tput civis
	if [ ! -f bundle.js ]; then
		echo -e "\n${yelc}[+]${endc} ${grac}Descargando fichero de máquinas...${endc}\n"
		curl -s -X GET $main_url > bundle_download.js
		js-beautify bundle_download.js > bundle.js
		rm bundle_download.js
		echo -e "\n${yelc}[+]${endc} ${grac}Fichero descargado.${endc}\n"
	else
		echo -e "\n${yelc}[+]${endc} ${grac}Comprobando actualizaciones del fichero.${endc}\n"
		curl -s -X GET $main_url > bundle_download.js
		js-beautify bundle_download.js > bundle_temp.js
		rm bundle_download.js
		md5_temp_value=$(md5sum bundle_temp.js | awk '{print$1}')
		md5_orig_value=$(md5sum bundle.js | awk '{print$1}')
		if [ "$md5_temp_value" == "$md5_orig_value" ]; then
			echo -e "\n${yelc}[+]${endc} ${grac}Fichero de máquinas ya está al día.${endc}\n"
			rm bundle_temp.js
		else
			echo -e "\n${yelc}[+]${endc} ${grac}Se han encontrado actualizaciones al fichero.${endc}\n"
			echo -e "\t${purc}u)${endc} ${grac}Comienza la actualización...${endc}\n"
			sleep 1
			rm bundle.js && mv bundle_temp.js bundle.js
			echo -e "\n${yelc}[+]${endc} ${grac}Fichero de máquinas actualizado.${endc}\n"
		fi
	fi


	tput cnorm
}

function searchMachine(){
	machineName="$1"
	machineData="$(cat bundle.js | awk "/name: \"$machineName\"/,/resuelta:/" | grep -vE "id:|sku:|resuelta" | tr -d "\"" | tr -d "," | sed "s/^ * //")"
	if [ "$machineData" == "" ]; then
		echo -e "\n\n${redc}[!] No se ha encontrado la máquina${endc} ${bluc}$machineName${endc}${redc} . ${endc}\n\n"
	else
		echo -e "\n\t${purc}[+]${endc} ${grac}Listando propiedades de la máquina ${bluc}$machineName${endc}${grac}: ${endc}\n"
		echo "$machineData"
	fi

}

function searchIP(){
	ipAddress="$1"
	machineName=$(cat bundle.js | grep "ip: \"$ipAddress\"" -B 3 | grep "name:" | awk 'NF{print $NF}' | tr -d '"' | tr -d ',')
	if [ "$machineName" == "" ]; then
		echo -e "\n\n${redc}[!] No se ha encontrado máquina con IP${endc} ${bluc}$ipAddress${endc}${redc} . ${endc}\n\n"
	else
		echo -e "\n\t${purc}[+]${endc} ${grac}La IP ${bluc}$ipAddress${endc}${grac} pertenece a la máquina ${endc}${bluc}$machineName${endc}${grac} . ${endc}\n"
	fi
}

function getYoutubeLink(){
	machineName="$1"
	youtubeUrl=$(cat bundle.js | awk "/name: \"$machineName\"/,/resuelta:/" | grep -vE "id:|sku:|resuelta" | tr -d "\"" | tr -d "," | sed "s/^ * //" | grep youtube | awk 'NF{print $NF}')
	if [ "$youtubeUrl" == "" ]; then
		echo -e "\n\n${redc}[!] No se ha encontrado la máquina${endc} ${bluc}$machineName${endc}${redc} . ${endc}\n\n"
	else
		echo -e "\n\t${purc}[+]${endc} ${grac}La máquina ${bluc}$machineName${endc}${grac} tiene un Writeup en la url:\n\n ${endc}${bluc}$youtubeUrl${endc}${grac} . ${endc}\n"
	fi
}

function getMachinesDifficulty(){
	difficulty="$1"
	machinesFound="$(cat bundle.js | grep -i "dificultad: \"$difficulty\"" -B 5 | grep "name: " | awk 'NF{print $NF}' | tr -d '"' | tr -d ',' | column)"
	if [ "$machinesFound" == "" ]; then
		echo -e "\n\n${redc}[!] No se han encontrado máquinas de dificultad${endc} ${bluc}$difficulty${endc}${redc} . ${endc}\n\n"
	else
		echo -e "\n\t${purc}[+]${endc} ${grac}Listando máquinas de dificultad ${bluc}$difficulty${endc}${grac}: ${endc}\n"
		echo "$machinesFound"
	fi
}

function getOSMachines(){
	os="$1"
	machinesFound="$(cat bundle.js | grep -i "so: \"$os\"" -B 5 | grep "name: " | awk 'NF{print $NF}' | tr -d '"' | tr -d ',' | column)"
	if [ "$machinesFound" == "" ]; then
		echo -e "\n\n${redc}[!] No se han encontrado máquinas de S.O.${endc} ${bluc}$os${endc}${redc} . ${endc}\n\n"
	else
		echo -e "\n\t${purc}[+]${endc} ${grac}Listando máquinas de S.O. ${bluc}$os${endc}${grac}: ${endc}\n"
		echo "$machinesFound"
	fi
}

function getOSDiffMachines(){
	difficulty="$1"
	os="$2"
	machinesFound="$(cat bundle.js | grep -i "so: \"$os\"" -C 4 | grep -i "dificultad: \"$difficulty\"" -B 5 | grep "name: " | awk 'NF{print $NF}' | tr -d '"' | tr -d ',' | column)"
	if [ "$machinesFound" == "" ]; then
		echo -e "\n\n${redc}[!] No se han encontrado máquinas de S.O.${endc} ${bluc}$os${endc}${redc} y dificultad${endc} ${bluc}$difficulty${endc}${redc} . ${endc}\n\n"
	else
		echo -e "\n\t${purc}[+]${endc} ${grac}Listando máquinas de S.O. ${bluc}$os${endc}${grac} y dificultad ${endc}${bluc}$difficulty${endc}${grac}: ${endc}\n"
		echo "$machinesFound"
	fi
}

function getSkill(){
	skill="$1"
	machinesFound="$(cat bundle.js | grep "skills: " -B 6 | grep -i "$skill" -B 6 | grep "name: " | awk 'NF{print $NF}' | tr -d '"' | tr -d ',' | column)"
	if [ "$machinesFound" == "" ]; then
		echo -e "\n\n${redc}[!] No se han encontrado máquinas para la skill${endc} ${bluc}$skill${endc}${redc} . ${endc}\n\n"
	else
		echo -e "\n\t${purc}[+]${endc} ${grac}Listando máquinas para skill ${bluc}$skill${endc}${grac}: ${endc}\n"
		echo "$machinesFound"
	fi
}

# Indicadores
declare -i parameter_counter=0

# Flags Multi Args
declare -i argumentOS=0
declare -i argumentDiff=0

while getopts "m:ui:y:d:o:s:h" arg; do
	case $arg in
		m) machineName="$OPTARG"; let parameter_counter+=1;;
		u) let parameter_counter+=2;;
		i) ipAddress="$OPTARG"; let parameter_counter+=3;;
		y) machineName="$OPTARG"; let parameter_counter+=4;;
		d) difficulty="$OPTARG"; argumentDiff=1; let parameter_counter+=5;;
		o) os="$OPTARG"; argumentOS=1; let parameter_counter+=6;;
		s) skill="$OPTARG"; let parameter_counter+=7;;
		h) ;;
	esac
done


if [ $parameter_counter -eq 1 ]; then
	searchMachine $machineName
elif [ $parameter_counter -eq 2 ]; then
	updateFile
elif [ $parameter_counter -eq 3 ]; then
	searchIP $ipAddress
elif [ $parameter_counter -eq 4 ]; then
	getYoutubeLink $machineName
elif [ $parameter_counter -eq 5 ]; then
	getMachinesDifficulty $difficulty
elif [ $parameter_counter -eq 6 ]; then
	getOSMachines $os
elif [ $argumentOS -eq 1 ] && [ $argumentDiff -eq 1 ]; then
	getOSDiffMachines $difficulty $os
elif [ $parameter_counter -eq 7 ]; then
	getSkill "$skill"
else
	helpPanel
fi
