#!/usr/bin/env python3

# Autodork3r version 1 by artp3r
# Autodorker python3 script to automate google dorks
# https://github.com/ARTP3R/Pentesting/blob/main/recon/autodork3r.py

import os
import requests
from bs4 import BeautifulSoup
import urllib.parse
from colorama import init, Fore, Style

init(autoreset=True)

ascii_art = """
              _            _            _    _____      v1.1003
   __ _ _   _| |_ ___   __| | ___  _ __| | _|___ / _ __ 
  / _` | | | | __/ _ \ / _` |/ _ \| '__| |/ / |_ \| '__|
 | (_| | |_| | || (_) | (_| | (_) | |  |   < ___) | |   
  \__,_|\__,_|\__\___/ \__,_|\___/|_|  |_|\_\____/|_|   by artp3r
https://github.com/ARTP3R/Pentesting/blob/main/recon/autodork3r.py
"""

predefined_dorks = [
    '"inurl:login"',
    '"intitle:index of"',
    '"inurl:admin"',
    '"intext:password"'
]

def read_dorks_from_file(file_path):
    if not os.path.isfile(file_path):
        print(f"The file {file_path} does not exist.")
        return []
    with open(file_path, 'r') as file:
        dorks = [line.strip() for line in file if line.strip()]
    return dorks

def generate_dorks(dorks, terms):
    combinations = []
    for dork in dorks:
        for term in terms:
            combinations.append(f'{dork} {term}')
    return combinations

def save_combinations_to_file(combinations, file_path):
    with open(file_path, 'w') as file:
        for combination in combinations:
            file.write(f'{combination}\n')
    print(f"Combinations saved to {file_path}")

def google_search(query):
    encoded_query = urllib.parse.quote_plus(query)
    url = f"https://www.google.com/search?q={encoded_query}"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        results = []
        for item in soup.select('div.yuRUbf a'):
            title = item.get_text()
            link = item.get('href')
            results.append((title, link))
        return results
    else:
        print(f"Error performing search: {response.status_code}")
        return []

def save_search_results_to_file(results, file_path):
    with open(file_path, 'a') as file:
        for query, items in results.items():
            file.write(f"\nResults for: {query}\n")
            for title, link in items:
                file.write(f"Title: {title}\nLink: {link}\n")
    print(f"Search results saved to {file_path}")

def main():
    for line in ascii_art.splitlines():
        print(f"{Fore.GREEN}{line}{Style.RESET_ALL}")
    
    dorks_file_path = input("Enter the path of the dorks file (leave blank to use only predefined dorks): ").strip()
    dorks_from_file = read_dorks_from_file(dorks_file_path) if dorks_file_path else []
    
    dorks = predefined_dorks + dorks_from_file
    
    terms = input("Enter one or two search terms, separated by a comma: ").split(',')
    terms = [term.strip() for term in terms if term.strip()]

    if len(terms) == 0:
        print("You must enter at least one search term.")
        return
    
    combinations = generate_dorks(dorks, terms)

    for combination in combinations:
        print(combination)
    
    combinations_output_file = input("Enter the path of the output file for combinations (leave blank to use default 'combinations.txt'): ").strip()
    if not combinations_output_file:
        combinations_output_file = 'combinations.txt'
    save_combinations_to_file(combinations, combinations_output_file)
    
    search_results_output_file = input("Enter the path of the output file for search results (leave blank to use default 'search_results.txt'): ").strip()
    if not search_results_output_file:
        search_results_output_file = 'search_results.txt'
    
    search_results = {}
    for combination in combinations:
        print(f"{Fore.CYAN}\nResults for: {combination}")
        search_results_for_combination = google_search(combination)
        search_results[combination] = search_results_for_combination
        for title, link in search_results_for_combination:
            print(f"{Fore.GREEN}Title:{Style.RESET_ALL} {title}\n{Fore.YELLOW}Link: {Style.RESET_ALL}{link}\n")
    
    save_search_results_to_file(search_results, search_results_output_file)

if __name__ == "__main__":
    main()
